/*
* 문제
지민이는 N개의 물병을 가지고 있다. 각 물병에는 물을 무한대로 부을 수 있다. 처음에 모든 물병에는 물이 1리터씩 들어있다. 지민이는 이 물병을 또 다른 장소로 옮기려고 한다. 지민이는 한 번에 K개의 물병을 옮길 수 있다. 하지만, 지민이는 물을 낭비하기는 싫고, 이동을 한 번보다 많이 하기는 싫다. 따라서, 지민이는 물병의 물을 적절히 재분배해서, K개를 넘지 않는 비어있지 않은 물병을 만들려고 한다.

물은 다음과 같이 재분배 한다.

먼저 같은 양의 물이 들어있는 물병 두 개를 고른다. 그 다음에 한 개의 물병에 다른 한 쪽에 있는 물을 모두 붓는다. 이 방법을 필요한 만큼 계속 한다.

이런 제약 때문에, N개로 K개를 넘지않는 비어있지 않은 물병을 만드는 것이 불가능할 수도 있다. 다행히도, 새로운 물병을 살 수 있다. 상점에서 사는 물병은 물이 1리터 들어있다.

예를 들어, N=3이고, K=1일 때를 보면, 물병 3개로 1개를 만드는 것이 불가능하다. 한 병을 또다른 병에 부으면, 2리터가 들어있는 물병 하나와, 1리터가 들어있는 물병 하나가 남는다. 만약 상점에서 한 개의 물병을 산다면, 2리터가 들어있는 물병 두 개를 만들 수 있고, 마지막으로 4리터가 들어있는 물병 한 개를 만들 수 있다.

입력
첫째 줄에 N과 K가 주어진다. N은 107보다 작거나 같은 자연수이고, K는 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 상점에서 사야하는 물병의 최솟값을 출력한다. 만약 정답이 없을 경우에는 -1을 출력한다.
*
* 같은 양의 물이 들어간 물통을 만들어야함 이걸 이해하는데도 오래 걸리누 ㅋㅋ
*
* 1 2 4 8 16 32 64 뭔가 2의 거듭제곱으로 나오는걸 생각해서 풀면 좋을거 같음
*  결국은 2의 제곱수로 맞춰서 풀어야 되니까 이거에 맞춰서 2의 거듭 제곱을 구성하는걸 생각하면 됨
*
*
*  */

import java.io.*;
import java.util.*;
public class baek1052 {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken()); // 현재 물병 개수
        int K = Integer.parseInt(st.nextToken()); // 이동 가능한 최대 물병 수

        int bottleBuy = 0; // 새로 사야 하는 물병의 개수

        // 물병 개수를 줄일 수 없는 경우 확인
        while (Integer.bitCount(N) > K) { // 레전드 해설이네 이것만 있으면 킹 왕 짱 야미 개꿀딱
            // Integer.bitCount() 메서드는 Java에서 **정수의 이진수 표현에서 1의 개수(즉, 켜진 비트의 수)**를 계산하는 데 사용됩니다.
            N++;
            bottleBuy++;
        }

        System.out.println(bottleBuy);

    }
}
